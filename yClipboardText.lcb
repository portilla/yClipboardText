/*
Librería para acceder al contenido del portapapeles, así como enviar contenido;

desarrollada en el 2024 por Yunior Portilla Rodríguez

Está Librería por el momento permite solo acceder a la información de tipo texto del portapapeles.
*/

/**
Summary: Librería que contiene dos funciones básicas, una para acceder al contenido de tipo Texto que se encuentra
en el portapapeles y otra para enviar al portapapeles un contenido de tipo texto y ser utilizado desde
una aplicación externa.

Platforms: android

Description:
La librería permite acceder mediantes las funciones al portapapeles, así como depositar contenido en el mismo, posibilitando 
utilizar desde LiveCode script para insertar el texto copiado desde una aplicación externa en una propiedad valida de un objeto
LiveCode o variable, así como copiar un texto seleccionado de un campo texto para ser utilizado en una apliación externa.
*/

library cu.tgraf.clipboardtext

metadata version is "1.0.0"
metadata author is "TGraf - Tecnologia y Grafica"
metadata title is "ClipBoard Text"

use com.livecode.foreign
use com.livecode.java
use com.livecode.library.androidutils

constant kCLIPBOARD_SERVICE is "clipboard"

__safe foreign handler _JNI_getClipboardManager(in pContext as JObject, in pClipboardService as JString) returns JObject binds to "java:android.content.Context>getSystemService(Ljava/lang/String;)Ljava/lang/Object;"

__safe foreign handler _JNI_hasPrimaryClip(in pClipboardManager as JObject) returns JBoolean binds to "java:android.content.ClipboardManager>hasPrimaryClip()Z"
__safe foreign handler _JNI_clearPrimaryClip(in pClipboardManager as JObject) returns nothing binds to "java:android.content.ClipboardManager>clearPrimaryClip()V"

__safe foreign handler _JNI_getPrimaryClip(in pClipboardManager as JObject) returns JObject binds to "java:android.content.ClipboardManager>getPrimaryClip()Landroid/content/ClipData;"
__safe foreign handler _JNI_getItemAt(in pClipData as JObject, in pIndex as JInt) returns JObject binds to "java:android.content.ClipData>getItemAt(I)Landroid/content/ClipData$Item;"

__safe foreign handler _JNI_getText(in pItem as JObject) returns JString binds to "java:android.content.ClipData$Item>getText()Ljava/lang/CharSequence;"

__safe foreign handler _JNI_newPlainText(in pLabel as JString, in pText as JString) returns JObject binds to "java:android.content.ClipData>newPlainText(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;!static"
__safe foreign handler _JNI_setPrimaryClip(in pClipboardManager as JObject, in pClipData as JObject) returns nothing binds to "java:android.content.ClipboardManager>setPrimaryClip(Landroid/content/ClipData;)V"

/**
Summary: Permite obtener el objeto clipboard de ClipBoardManager para manejar el portapapeles.

Platforms: android

Example:
getClipboardManager()

Parameters: Ninguno

Returns: Devuelve el objeto clipboard de ClipBoardManager para manejar el portapapeles.

Description:
Este es un manipulador privado que solo puede ser llamado desde funciones o metodos de la libreria.
*/
private handler getClipboardManager() returns JObject
    variable tContext as JObject
   
    unsafe
        put ApplicationContext() into tContext
        return _JNI_getClipboardManager(tContext, StringToJString(kCLIPBOARD_SERVICE))
    end unsafe
end handler

/**
Summary: Permite comprobar si existe contenido en el portapapeles.

Platforms: android

Example:
hasClipboardText()

Parameters: Ninguno

Returns: Devuelve true si existe contenido en el portapapeles y false en caso contrario.

Description:
Puedes utilizar el manipulador <hasClipboardText> para comprobar si es necesario llamar al objeto ClipData por el contenido del portapapeles.
*/
public handler hasClipboardText() returns Boolean
    variable tClipboardManager as JObject

    unsafe
        put getClipboardManager() into tClipboardManager
        return _JNI_hasPrimaryClip(tClipboardManager)
    end unsafe
end handler

/**
Summary: Permite borrar el contenido del portapapeles.

Platforms: android

Example:
clearPrimaryClip()

Parameters: Ninguno

Returns: Devuelve empty si la operacion se ejecuto satisfactoriamente.

Description:
Puedes utilizar el manipulador <clearPrimaryClip()> para borrar el contenido del portapapeles.
*/
public handler clearPrimaryClip() returns nothing
    variable tClipboardManager as JObject

    unsafe
        put getClipboardManager() into tClipboardManager
        return _JNI_clearPrimaryClip(tClipboardManager)
    end unsafe
end handler

/**
Summary: Permite obtener el contenido de tipo texto del portapapeles.

Platforms: android

Example:
getClipboardText()

Parameters: Ninguno

Returns: Devuelve el texto que se encuentra en el portapapeles o vacio si en el portapapeles no hay contenido de tipo texto.

Description:
Puedes utilizar el manipulador <getClipboardText> para obtener el contenido de tipo texto del portapapeles.
*/
public handler getClipboardText() returns String
    variable tClipboardManager as JObject
    variable tClipData as JObject
    variable tItem as JObject
    variable tText as JString
	    
    unsafe
        put getClipboardManager() into tClipboardManager
        put _JNI_getPrimaryClip(tClipboardManager) into tClipData

        put _JNI_getItemAt(tClipData, 0) into tItem
        put _JNI_getText(tItem) into tText
        
        return StringFromJString(tText)
    end unsafe
end handler

/**
Summary: Permite enviar una cadena de texto para el portapapeles del sistema.

Platforms: android

Example:
setClipboardText()

Parameters: 
pText: La cadena de tipo texto a insertar en el portapapeles

Returns: En the result si está vacío se ejecutó con éxito la función. De lo contrario puede manipular el error en the result. Todo ello desde LiveCode Script

Description:
El manipulador <setClipboardText()> se utiliza para insertar una cada de texto en el portapapeles del sistema y luego utilizarlo desde otra aplicación.
*/
public handler setClipboardText(in pText as String) returns nothing
    variable tClipboardManager as JObject
    variable tClipData as JObject

    unsafe    
        put getClipboardManager() into tClipboardManager        
        put _JNI_newPlainText(StringToJString("simple text"), StringToJString(pText)) into tClipData

        _JNI_setPrimaryClip(tClipboardManager, tClipData)
    end unsafe
end handler

end library